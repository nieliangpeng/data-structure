#include <stdio.h>
#include <string.h>
#include<math.h>
#include <stdlib.h>
static int weight=0;
//算符优先关系矩阵
unsigned char prior[7][7]={
    /*        +     -  *    /  (   )   #      */
 /*  +  */    '>','>','<','<','<','>','>',
/*   -  */    '>','>','<','<','<','>','>',
/*   *  */    '>','>','>','>','<','>','>',
/*   /  */    '>','>','>','>','<','>','>',
/*   (   */   '<','<','<','<','<','=',' ',
/*   )   */   '>','>','>','>',' ','>','>',
/*   #   */    '<','<','<','<','<',' ','=',

};

char oper[7]={'+','-','*','/','(',')','#'};

typedef struct stackChar{
    char c;
    struct stackChar *next;
}stackChar;
typedef struct stackData{
    float f;
    struct stackData *next;
}stackData;

stackChar * push(stackChar *s,char c){
    stackChar *p=(stackChar*)malloc(sizeof(stackChar));
    p->c=c;
    p->next=s;
    return p;

}
stackData * push(stackData *s,float f){
    stackData *p=(stackData*)malloc(sizeof(stackData));
    p->f=f;
    p->next=s;
    return p;

}

stackChar *pop(stackChar*s){
    stackChar* p=s;
    s=s->next;
    free(p);
    return s;
}


stackData *pop(stackData*s){
    stackData* p=s;
    s=s->next;
    free(p);
    return s;
}

float dataOperator(float x,unsigned char c,float y){
    switch (c){
    case '+': return x+y;
    case '-': return x-y;
    case '*': return x*y;
    case '/':return x/y;
    default:  return 0;
    }

}

int  isornooperator(char c,char *oper){
    int a=0;
    for(int i=0;i<7;i++){
        if(c==oper[i])  a=1;
    
    }
    return a;
}

int returnXB (char text, char *oper){
    
    for(int i=0;i<7;i++){
       if(text==oper[i]) return i;
    }
    return -1;
}

char priority (char a,char b){
    return prior[returnXB(a,oper)][returnXB(b,oper)];
}
float dataYS(char *sr){
    stackChar *sc=NULL;//运算符栈
    stackData *sd=NULL;//运算数栈
    sc=push(sc,'#');

    char sz[100];//存数值

    char SZ[2]={'#','\0'};
    float date,a,b;
    char *c;
    char theta;
    
    strcpy(sz,"\0");
    c=strcat(sr,SZ);//输入的式子
    while (*c!='#'|| sc->c!='#')
    {
        if(!isornooperator(*c,oper)){
           //是数值
           SZ[0]=*c;
           strcat(sz,SZ);//连接数值字符
           c++;
           if(isornooperator(*c,oper)){
               //运算符,把数值入栈
               date=atof(sz);//函数 atof() 用于将字符串转换为双精度浮点数(double)
               sd=push(sd,date);
               strcpy(sz,"\0");
           }

        }
        else{
            switch ( priority (sc->c,*c))
            {
            case '<'://入栈
                sc=push(sc,*c);
                c++;
                break;
            case '='://去左括号
                sc=pop(sc);
                c++;
                break;
            case '>'://出栈并将操作结果入栈,不用c++；可以使（）遇到执行case ‘=’去左括号
                theta=sc->c;sc=pop(sc);
                a=sd->f;sd=pop(sd);
                b=sd->f;sd=pop(sd);
                if(theta=='/'){
                    if(a==0){
                       
                        weight=1;
                        return 0;
                    }

                }
                sd=push(sd,dataOperator(b,theta,a));
                break;

            }
            

        
        
        
        }
    }

    return sd->f;
}
int main(void){
   
    char s[100];
    int n;
    float data;
    puts("表达式求值模拟程序");
    puts("");
    puts("功能菜单");
    puts("===============");
    puts("[1]输入表达式并求值");
    puts("");
    puts("[0]退出");
    puts("");
    puts("===============");
    puts("");
    printf("请输入你的选择(0--1)：");
    scanf("%d",&n);
    while(n){
      
       printf("请输入一个表达式：\n");
       scanf("%s",&s);
     
       data=dataYS(s);
       if(weight==0){
           puts("");
           puts("计算结果如下：");
           printf("%s\b=",s);
           printf("%g\n",data); //%g用来输出实数，它根据数值的大小，自动选f格式或e格式（选择输出时占宽度较小的一种），且不输出无意义的0. 
           puts("");
           printf("请输入你的选择(0--1)：");
           scanf("%d",&n);
           puts("");
       }
       else{
            puts("");
            printf("error:除数不能是0,请重新输入你的选择！\n");
            puts("");
            weight=0;
            printf("请输入你的选择(0--1)：");
            scanf("%d",&n);
       }
    
    }
    return 0;
   


}


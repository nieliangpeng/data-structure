/***
*ElemType.h - ElemType的定义
*
****/

#ifndef ELEMTYPE_H
#define ELEMTYPE_H

typedef int ElemType;

int  compare(ElemType x, ElemType y);
void visit(ElemType e);

#endif /* ELEMTYPE_H */
---------------------------------------------------------------------------------------------------------------------------------------
/***
*ElemType.cpp - ElemType的实现
*	
****/

#include <stdio.h>
#include "ElemType.h"

int compare(ElemType x, ElemType y)
{
	return(x-y);
}

void visit(ElemType e)
{
	printf("%d\n", e);
}
--------------------------------------------------------------------------------------------------------------------------------------
/***
*DynaLnkList.h - 动态链表的定义
*	
****/

#if !defined(DYNALNKLIST_H)
#define DYNALNKLIST_H

#include "ElemType.h"

/*------------------------------------------------------------
// 链表结构的定义
------------------------------------------------------------*/
typedef struct Node
{
	ElemType data;				// 元素数据
	struct Node *next;			// 链表中结点元素的指针
} LNode, *LinkList;

/*------------------------------------------------------------
// 链表的基本操作
------------------------------------------------------------*/

bool InitList(LinkList *L);
void DestroyList(LinkList *L);
bool ListEmpty(LinkList L);
int  ListLength(LinkList L);
bool GetElem(LinkList L, int i, ElemType *e);
int  LocateElem(LinkList L, ElemType e, int (*fp)(ElemType, ElemType));
bool PriorElem(LinkList L, ElemType cur_e, ElemType *pre_e);
bool NextElem(LinkList L, ElemType cur_e, ElemType *nxt_e);
void ListTraverse(LinkList L, void (*fp)(ElemType));
void ClearList(LinkList L);
bool ListInsert(LinkList L, int i, ElemType e);
bool ListDelete(LinkList L, int i, ElemType *e);

#endif /* DYNALNKLIST_H */
----------------------------------------------------------------------------------------------------------------------------------
/***
*DynaLnkList.cpp - 动态链表，即顺序表的动态链式存储实现
*	
****/

#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <assert.h>
#include "DynaLnkList.h"

/*------------------------------------------------------------
操作目的：	初始化链表
初始条件：	无
操作结果：	构造一个空的线性表
函数参数：
		LinkList *L	待初始化的线性表
返回值：
		bool		操作是否成功
------------------------------------------------------------*/
bool InitList(LinkList *L)      //双重指针
{
    
    *L=(LinkList)malloc(sizeof(LNode));
    
    if (NULL==*L) return false;
    (*L)->next=NULL;
    return true;


}

/*------------------------------------------------------------
操作目的：	销毁链表
初始条件：	线性表L已存在
操作结果：	销毁线性表L
函数参数：
		LinkList *L	待销毁的线性表
返回值：
		无
------------------------------------------------------------*/
void DestroyList(LinkList *L)
{
   
    while((*L)->next!=NULL)
    {
         LinkList list=*L;
         (*L)=(*L)->next;
         free(list);

    
    }
    free(*L);

    

}

/*------------------------------------------------------------
操作目的：	判断链表是否为空
初始条件：	线性表L已存在
操作结果：	若L为空表，则返回true，否则返回false
函数参数：
		LinkList L	待判断的线性表
返回值：
		bool		是否为空
------------------------------------------------------------*/
bool ListEmpty(LinkList L)
{
    if(L->next==NULL)
        return true;
    return false;
}

/*------------------------------------------------------------
操作目的：	得到链表的长度
初始条件：	线性表L已存在
操作结果：	返回L中数据元素的个数
函数参数：
		LinkList L	线性表L
返回值：
		int			数据元素的个数
------------------------------------------------------------*/
int ListLength(LinkList L)
{
    int i=0;
    LinkList list=L->next;
    for(i;list->next!=NULL;++i)
    {
        list=list->next;
    
    }
    ++i;
    return i;
}

/*------------------------------------------------------------
操作目的：	得到链表的第i个元素
初始条件：	线性表L已存在，1<=i<=ListLength(L)
操作结果：	用e返回L中第i个数据元素的值
函数参数：
		LinkList L	线性表L
		int i		数据元素的位置
		ElemType *e	第i个数据元素的值
返回值：
		bool		操作是否成功
------------------------------------------------------------*/
bool GetElem(LinkList L, int i, ElemType *e)
{
    LinkList p=L;
    int j=1;
    p=L->next;
    while(p&&j<i)
    {
        p=p->next;
        ++j;
    
    }
    if(!p||j>i)
        return false;
    *e=p->data;
    return true;
}

/*------------------------------------------------------------
操作目的：	得到链表指定元素的位置
初始条件：	线性表L已存在
操作结果：	返回L中第一个与e满足关系compare()的数据元素的位序。
			若这样的元素不存在则返回0。
函数参数：
		LinkList L	线性表L
		ElemType e	数据元素e
		int (*fp)()	用于比较相等的函数指针
返回值：
		int			与e满足关系compare()的数据元素的位序
------------------------------------------------------------*/
int LocateElem(LinkList L, ElemType e, int (*fp)(ElemType, ElemType))
{
    LinkList p=L->next;
    int i=1;
    while(fp(p->data,e)!=0)
    {
        p=p->next;
        i++;

    }
    return i;


}

/*------------------------------------------------------------
操作目的：	得到链表指定元素的前驱
初始条件：	线性表L已存在
操作结果：	若cur_e是L的数据元素，且不是第一个，则用pre_e返回
			它的前驱，否则操作失败，pre_e无定义
函数参数：
		LinkList L		线性表L
		ElemType cur_e	数据元素cur_e
		ElemType *pre_e	前驱数据元素
返回值：
		bool			操作是否成功
------------------------------------------------------------*/
bool PriorElem(LinkList L, ElemType cur_e, ElemType *pre_e)
{
    LinkList p= L->next;
    if(p->data==cur_e)
    {
        return false;
    }
    while(p->next->data!=cur_e)
    {
        p=p->next;
    }
    
    *pre_e=p->data;
    return true;

}

/*------------------------------------------------------------
操作目的：	得到链表指定元素的后继
初始条件：	线性表L已存在
操作结果：	若cur_e是L的数据元素，且不是最后一个，则用nxt_e返
			回它的后继，否则操作失败，nxt_e无定义
函数参数：
		LinkList L		线性表L
		ElemType cur_e	数据元素cur_e
		ElemType *nxt_e	后继数据元素
返回值：
		bool			操作是否成功
------------------------------------------------------------*/
bool NextElem(LinkList L, ElemType cur_e, ElemType *nxt_e)
{
    LinkList p= L->next;
    while(p->data!=cur_e)
    {
        p=p->next;
    }
    if(p->next!=NULL)
    {
        *nxt_e=p->next->data;
        return true;
    }
    return false;

}

/*------------------------------------------------------------
操作目的：	遍历链表
初始条件：	线性表L已存在
操作结果：	依次对L的每个元素调用函数fp
函数参数：
		LinkList L		线性表L
		void (*fp)()	访问每个数据元素的函数指针
返回值：
		无
------------------------------------------------------------*/
void ListTraverse(LinkList L, void (*fp)(ElemType))
{
    LinkList p=L->next;
    while (p)
    {
        (*fp)(p->data);
         p=p->next;
    
    }
}

/*------------------------------------------------------------
操作目的：	清空链表
初始条件：	线性表L已存在
操作结果：	将L置为空表
函数参数：
		LinkList L	线性表L
返回值：
		无
------------------------------------------------------------*/
void ClearList(LinkList L)
{
    LinkList p=L->next;
    while(p)
    {
        LinkList q=p;
        p=p->next;
        free(q);

    }
    L->next=NULL;
}

/*------------------------------------------------------------
操作目的：	在链表的指定位置插入结点，插入位置i表示在第i个
			元素之前插入
初始条件：	线性表L已存在，1<=i<=ListLength(L) + 1
操作结果：	在L中第i个位置之前插入新的数据元素e，L的长度加1
函数参数：
		LinkList L	线性表L
		int i		插入位置
		ElemType e	待插入的数据元素
返回值：
		bool		操作是否成功
------------------------------------------------------------*/
bool ListInsert(LinkList L, int i, ElemType e)
{
    LinkList P=L;
    int j=0;
    while(P&&j<i-1)
    {
        P=P->next;
        ++j;
    
    
    }
    if(!P||j>i-1)
        return false;
    LinkList S=(LinkList)malloc(sizeof(LNode));
    if(S==NULL)
        return false;
    else
    {
        S->data=e;
        S->next=P->next;
        P->next=S;
        return true;
    }


    
}

/*------------------------------------------------------------
操作目的：	删除链表的第i个结点
初始条件：	线性表L已存在且非空，1<=i<=ListLength(L)
操作结果：	删除L的第i个数据元素，并用e返回其值，L的长度减1
函数参数：
		LinkList L	线性表L
		int i		删除位置
		ElemType *e	被删除的数据元素值
返回值：
		bool		操作是否成功
------------------------------------------------------------*/
bool ListDelete(LinkList L, int i, ElemType *e)
{
    LinkList p= L;
    int j=0;
    while(p->next&&j<i-1)
    {
        p=p->next;
        ++j;
    
    }
    if(!(p->next)||j>i-1)
        return false;
    LinkList q=p->next;
    p->next=q->next;
    *e=q->data;
    free(q);
    return true;
}
